---
import '@fontsource-variable/montserrat';
import '@fontsource/silkscreen';
import { Image } from 'astro:assets';
import logo from '../../public/images/wonderworm.png';
import Nav from '../components/nav/nav.astro';
import ThemeToggle from '../components/theme-toggle/theme-toggle.astro';
import '../styles/global.css';
import { registerUser } from '../utils/auth';
import type { RegisterHttpPostRequest } from '../models/auth/auth.interface';

let error: string | undefined = undefined;
if (Astro.request.method === 'POST') {
  error = undefined;
  const formData = await Astro.request.formData();
  if (formData.has('name')) {
    const user = {
      name: formData.get('name'),
      email: formData.get('email'),
      dateOfBirth: formData.get('dateOfBirth'),
      password: formData.get('password')
    } as RegisterHttpPostRequest;    
    const response = await handleRegisterUser(user);    
    if (response.isSuccess) {
      return Astro.redirect('/verify');
    } else {
      error = response.message;
    }
  }  
}

async function handleRegisterUser(user: RegisterHttpPostRequest): Promise<{isSuccess: boolean, message: string}> {
      const response = await registerUser(user);      
      return Promise.resolve(response);              
    }

---
<html lang="en">
	<head>
		<title>WonderWorm</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="icon" type="image/x-icon" href="images/wonderworm.png">
	</head>
	<body>
		<header>
			<Image width={50} src={logo} alt="WonderWorm Logo" />
			<div class="header-container">
				<h1>WonderWorm</h1>
				<div class="theme-toggle">
					<ThemeToggle />
				</div>
			</div>			
		</header>	
		<div class="main-container">
			<div class="nav-container">
				<Nav />
			</div>			
			<div class="content-container">
        <h2>Register to start learning!</h2>
        <form id="register-form" method="post">
          <fieldset>
            <div class="form-container">            
              <label for="name">Parent Name:*</label>
              <input type="text" id="name" name="name" required/>                           
              <label for="email">Email:*</label>
              <input type="email" id="email" name="email" required/>                                      
              <label for="dateOfBirth">Birthday(mm/dd/yyyy):*</label>
              <input type="text" id="dateOfBirth" name="dateOfBirth" required/>
              <div id="birthday-error" class="error hide"></div>
              <label for="password">Password:*</label>
              <input type="password" id="password" name="password" required/>              
              <label for="confirmPassword">Confirm Password:*</label>
              <input type="password" id="confirmPassword" name="confirmPassword" required/>      
              <div id="error-section" class="error hide">
              </div>
            </div>        
          </fieldset>
          <div class="actions">
            <button disabled id="registerBtn" class="primary" type="submit">Register</button>
            <span>Already have an account? <a href="/login">Login</a></span>
          </div>                    
        </form>     
        {error && <div class="error">{error}</div>}    
      </div>
    </div>
  </body>
  <style>
    .form-container {
      display: flex;
      flex-direction: column;      
      gap: .5rem; 
      width: 15rem;
      flex-wrap: wrap;
    }
    .hide {
      display: none;
    }
    .actions {
      margin: 1rem 0;
      display: flex;
      flex-direction: column;
    }
    .actions > span {
      margin-top: .25rem;
    }
  </style>  
  <script>
    import {fromEvent, takeUntil, Subject, debounceTime, merge} from 'rxjs';    
    const onDesstroySub$ = new Subject<void>();
    window.addEventListener('beforeunload', () => {      
      onDesstroySub$.next();
    });
    const formEl = document.querySelector('form') as HTMLFormElement;

    // birthday validation
    const birthdayEl = document.querySelector('#dateOfBirth') as HTMLInputElement;
    const birthdayErrorEl = document.querySelector('#birthday-error') as HTMLDivElement;    

    fromEvent(birthdayEl, 'keyup').pipe(debounceTime(50), takeUntil(onDesstroySub$)).subscribe(() => {
      validateBirthdayInput(birthdayEl, birthdayErrorEl);
      const isValid = formEl.checkValidity();
      if (isValid) {
        registerBtn.disabled = false;
      } else {
        registerBtn.disabled = true;
      }
    });

    const passwordEl = document.querySelector('#password') as HTMLInputElement;
    const confirmPasswordEl = document.querySelector('#confirmPassword') as HTMLInputElement;
    const errorSection = document.querySelector('#error-section') as HTMLDivElement;

    const passwordChange$ = fromEvent(passwordEl, 'keyup').pipe(debounceTime(50), takeUntil(onDesstroySub$));
    const confrimChange$ = fromEvent(confirmPasswordEl, 'keyup').pipe(debounceTime(50), takeUntil(onDesstroySub$));
    merge(passwordChange$, confrimChange$).pipe(takeUntil(onDesstroySub$)).subscribe(() => {
      validatePasswordInputs(passwordEl, confirmPasswordEl, errorSection);
      if (formEl.checkValidity()) {
        registerBtn.disabled = false;
      } else {
        registerBtn.disabled = true;
      }
    });

    // form validation    
    const registerBtn = document.querySelector('#registerBtn') as HTMLButtonElement;    

    fromEvent(formEl, 'change').pipe(takeUntil(onDesstroySub$)).subscribe(() => {          
      if (formEl.checkValidity()) {
        registerBtn.disabled = false;
      } else {
        registerBtn.disabled = true;
      }
    });

    function validatePasswordInputs(passwordEl: HTMLInputElement, confirmPasswordEl: HTMLInputElement, errorSectionEl: HTMLDivElement): void {
      const password = passwordEl.value;
      const confirmPassword = confirmPasswordEl.value;
      const pattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}$/;
      const isConfirmValid = password === confirmPassword;
      
      let errorMessage = '';
      const isValid = pattern.test(password) && isConfirmValid;
      if (!isValid) {
        if (!pattern.test(password)) {          
          errorSection.classList.remove('hide');
          errorMessage = 'Password must contain at least 8 characters, one uppercase letter, one lowercase letter, and one number';
          passwordEl.setCustomValidity(errorMessage);
          errorSection.innerHTML = errorMessage;          
        } else if (!isConfirmValid) {
          errorSection.classList.remove('hide');
          errorMessage = 'Passwords do not match';
          confirmPasswordEl.setCustomValidity(errorMessage);
          errorSection.innerHTML = errorMessage;
        }           
      } else {
        const errorSection = document.querySelector('#error-section') as HTMLDivElement;
        errorSection.classList.add('hide');
        errorMessage = '';
        passwordEl.setCustomValidity(errorMessage);
        confirmPasswordEl.setCustomValidity(errorMessage);
      }         
    }

    function validateBirthdayInput(birthdayEl: HTMLInputElement, errorSectionEl: HTMLDivElement): void {
      const birthday = birthdayEl.value;
      const pattern = /^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}$/;
      let errorMessage = '';
      if (!pattern.test(birthday)) {
        errorSectionEl.classList.remove('hide');
        errorMessage = 'Please enter a valid birthday';
        birthdayEl.setCustomValidity(errorMessage);
        errorSectionEl.innerHTML = errorMessage;
      } else {
        errorSectionEl.classList.add('hide');
        errorMessage = '';
        birthdayEl.setCustomValidity(errorMessage);
      }      
    }    

  </script>
</html>