---
import Loader from '../components/loader/loader.astro';
import MainLayout from '../layouts/main-layout.astro';
import type { RegisterHttpPostRequest } from '../models/auth/auth.interface';
import '../styles/global.css';
import { registerUser, googleLogin } from '../utils/auth';

let error: string | undefined = undefined;
let isLoading = false;
if (Astro.request.method === 'POST') {
  error = undefined;
  const formData = await Astro.request.formData();

  // Handle Google Sign-In (which acts as both login and registration)
  if (formData.has('credential')) {
    const credential = formData.get('credential');
    isLoading = true;
    const response = await handleGoogleSignIn(`${credential}`);
    if (response.isSuccess) {
      isLoading = false;
      return Astro.redirect('/');
    } else {
      isLoading = false;
      error = 'Google sign-in failed. Please try again.';
    }
  }

  // Handle regular registration
  if (formData.has('name')) {
    const user = {
      name: formData.get('name'),
      email: formData.get('email'),
      dateOfBirth: formData.get('dateOfBirth'),
      password: formData.get('password')
    } as RegisterHttpPostRequest;
    isLoading = true;
    const response = await handleRegisterUser(user);
    if (response.isSuccess) {
      isLoading = false;
      return Astro.redirect('/register-success');
    } else {
      isLoading = false;
      error = response.message;
    }
  }
}

async function handleRegisterUser(user: RegisterHttpPostRequest): Promise<{isSuccess: boolean, message: string}> {
    const response = await registerUser(user);
    return Promise.resolve(response);
}

async function handleGoogleSignIn(credential: string): Promise<{isSuccess: boolean}> {
  const response = await googleLogin(credential);
  if (response.isSuccess) {
    const {isSuccess, ...user} = response;
    Astro.cookies.set('user', JSON.stringify(user));
  }
  return {isSuccess: response.isSuccess};
}

---
<MainLayout>
  <div id="loading-container" class="hidden">
    <Loader />
  </div>
  {!isLoading &&
    <div class="flex flex-col items-center justify-center min-h-[60vh] text-[#1a1a1a]">
      <h2 class="text-2xl font-bold mb-6 text-indigo-700 dark:text-indigo-300">Register to start learning!</h2>

      <div class="w-full max-w-md bg-white rounded-xl shadow-md p-8 flex flex-col gap-4 border border-gray-100">

        <!-- Google Sign-In Button -->
        <div class="mb-4">
          <div id="g_id_onload"
               data-client_id="702051664956-gkk4m30vcn7929eljj8811r01teqdqho.apps.googleusercontent.com"
               data-context="signup"
               data-ux_mode="popup"
               data-callback="handleGoogleSignUp"
               data-auto_prompt="false">
          </div>
          <div class="g_id_signin"
               data-type="standard"
               data-shape="rectangular"
               data-theme="outline"
               data-text="signup_with"
               data-size="large"
               data-logo_alignment="left"
               data-width="100%">
          </div>
        </div>

        <!-- Divider -->
        <div class="flex items-center my-4">
          <div class="flex-grow border-t border-gray-300"></div>
          <span class="px-4 text-sm text-gray-500">or</span>
          <div class="flex-grow border-t border-gray-300"></div>
        </div>

        <!-- Regular Registration Form -->
        <form id="register-form" method="POST" class="flex flex-col gap-4">
          <fieldset class="flex flex-col gap-4">
            <label for="name" class="font-semibold">Parent Name:*</label>
            <input type="text" id="name" name="name" required class="input input-bordered rounded-md px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
            <label for="email" class="font-semibold">Email:*</label>
            <input type="email" id="email" name="email" required class="input input-bordered rounded-md px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
          <label for="dateOfBirth" class="font-semibold">Birthday (mm/dd/yyyy):*</label>
          <input type="text" id="dateOfBirth" name="dateOfBirth" required class="input input-bordered rounded-md px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
          <div id="birthday-error" class="text-red-600 text-sm hidden"></div>
          <label for="password" class="font-semibold">Password:*</label>
          <input type="password" id="password" name="password" required class="input input-bordered rounded-md px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
          <label for="confirmPassword" class="font-semibold">Confirm Password:*</label>
          <input type="password" id="confirmPassword" name="confirmPassword" required class="input input-bordered rounded-md px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
          <div id="error-section" class="text-red-600 text-sm hidden"></div>
        </fieldset>
        <button id="registerBtn" type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-md transition-colors mt-4">Register</button>
        {error && <div class="text-red-600 text-sm mt-2">{error}</div>}
        </form>

        <!-- Hidden form for Google Sign-In -->
        <form id="googleForm" method="POST" style="display: none;">
          <input type="hidden" id="googleCredential" name="credential" />
        </form>

        <div class="mt-4 text-center">
          <span>Already registered?</span>
          <a href="/login" class="font-semibold ml-1">
            <span class="text-indigo-700 dark:text-indigo-300 hover:underline">Sign in here</span>
          </a>
        </div>
      </div>

    </div>
  }

  <!-- Google Sign-In Script -->
  <script src="https://accounts.google.com/gsi/client" async defer></script>

  <script>
    // Google Sign-In callback function
    function handleGoogleSignUp(response: any) {
      const credential = response.credential;
      const googleForm = document.getElementById('googleForm') as HTMLFormElement;
      const credentialInput = document.getElementById('googleCredential') as HTMLInputElement;

      if (googleForm && credentialInput) {
        credentialInput.value = credential;
        googleForm.submit();
      }
    }

    // Make the function globally available
    (window as any).handleGoogleSignUp = handleGoogleSignUp;
  </script>

  <script>
    import { Subject, debounceTime, fromEvent, merge, takeUntil } from 'rxjs';
    const onDesstroySub$ = new Subject<void>();
    window.addEventListener('beforeunload', () => {
      onDesstroySub$.next();
    });
    const formEl = document.querySelector('form') as HTMLFormElement;

    // birthday validation
    const birthdayEl = document.querySelector('#dateOfBirth') as HTMLInputElement;
    const birthdayErrorEl = document.querySelector('#birthday-error') as HTMLDivElement;

    fromEvent(birthdayEl, 'keyup').pipe(debounceTime(50), takeUntil(onDesstroySub$)).subscribe(() => {
      validateBirthdayInput(birthdayEl, birthdayErrorEl);
      const isValid = formEl.checkValidity();
      if (isValid) {
        registerBtn.disabled = false;
      } else {
        registerBtn.disabled = true;
      }
    });

    const passwordEl = document.querySelector('#password') as HTMLInputElement;
    const confirmPasswordEl = document.querySelector('#confirmPassword') as HTMLInputElement;
    const errorSection = document.querySelector('#error-section') as HTMLDivElement;

    const passwordChange$ = fromEvent(passwordEl, 'keyup').pipe(debounceTime(50), takeUntil(onDesstroySub$));
    const confrimChange$ = fromEvent(confirmPasswordEl, 'keyup').pipe(debounceTime(50), takeUntil(onDesstroySub$));
    merge(passwordChange$, confrimChange$).pipe(takeUntil(onDesstroySub$)).subscribe(() => {
      validatePasswordInputs(passwordEl, confirmPasswordEl);
      if (formEl.checkValidity()) {
        registerBtn.disabled = false;
      } else {
        registerBtn.disabled = true;
      }
    });

    // form validation
    const registerBtn = document.querySelector('#registerBtn') as HTMLButtonElement;
    registerBtn.addEventListener('click', () => {
      const loadingContainer = document.querySelector('#loading-container') as HTMLDivElement;
      const contentContainer = document.querySelector('.content-container') as HTMLDivElement;
      loadingContainer.classList.remove('hide');
      loadingContainer.classList.add('show');
      contentContainer.classList.remove('show');
      contentContainer.classList.add('hide');
    });

    fromEvent(formEl, 'change').pipe(takeUntil(onDesstroySub$)).subscribe(() => {
      if (formEl.checkValidity()) {
        registerBtn.disabled = false;
      } else {
        registerBtn.disabled = true;
      }
    });

    function validatePasswordInputs(passwordEl: HTMLInputElement, confirmPasswordEl: HTMLInputElement): void {
      const password = passwordEl.value;
      const confirmPassword = confirmPasswordEl.value;
      const pattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}$/;
      const isConfirmValid = password === confirmPassword;

      let errorMessage = '';
      const isValid = pattern.test(password) && isConfirmValid;
      if (!isValid) {
        if (!pattern.test(password)) {
          errorSection.classList.remove('hide');
          errorMessage = 'Password must contain at least 8 characters, one uppercase letter, one lowercase letter, and one number';
          passwordEl.setCustomValidity(errorMessage);
          errorSection.innerHTML = errorMessage;
        } else if (!isConfirmValid) {
          errorSection.classList.remove('hide');
          errorMessage = 'Passwords do not match';
          confirmPasswordEl.setCustomValidity(errorMessage);
          errorSection.innerHTML = errorMessage;
        }
      } else {
        const errorSection = document.querySelector('#error-section') as HTMLDivElement;
        errorSection.classList.add('hide');
        errorMessage = '';
        passwordEl.setCustomValidity(errorMessage);
        confirmPasswordEl.setCustomValidity(errorMessage);
      }
    }

    function validateBirthdayInput(birthdayEl: HTMLInputElement, errorSectionEl: HTMLDivElement): void {
      const birthday = birthdayEl.value;
      const pattern = /^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)\d{2}$/;
      let errorMessage = '';
      if (!pattern.test(birthday)) {
        errorSectionEl.classList.remove('hide');
        errorMessage = 'Please enter a valid birthday';
        birthdayEl.setCustomValidity(errorMessage);
        errorSectionEl.innerHTML = errorMessage;
      } else {
        errorSectionEl.classList.add('hide');
        errorMessage = '';
        birthdayEl.setCustomValidity(errorMessage);
      }
    }
  </script>
</MainLayout>